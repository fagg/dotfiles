(in-package :stumpwm)
(setf *default-package* :stumpwm)

;; Debug helpers.
;;(setf *debug-level* 10)
;;(redirect-all-output (data-dir-file "debug-output" "txt"))

;; Quicklisp
(let ((quicklisp-init (merge-pathnames "src/lisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; Swank
(require :swank)
(swank-loader:init)

;; Startup.
(setf *startup-message* "Hack the planet. Good on ya champ.")
(setf *timeout-wait* 5)


;; Font.
(set-font "-*-terminus-medium-*-normal-*-14-*-*-*-*-*-*-*")

;; Window, frame, mouse behavior
(setf *mouse-focus-policy* :sloppy
      *window-border-style* :thin
      *message-window-gravity* :bottom-right
      *input-window-gravity* :bottom-right)

(set-normal-gravity :bottom)
(set-maxsize-gravity :center)
(set-transient-gravity :bottom)

(setf *normal-border-width* 2
      *maxsize-border-width* 0
      *transient-border-width* 2
      *float-window-border* 1
      *float-window-title-height* 1)

(setf *frame-number-map* "1234567890"
      *window-number-map* "1234567890")
(setf *suppress-frame-indicator* t)

;; Colors.
(set-msg-border-width 1)
(set-fg-color "white")
(set-bg-color "black")
(set-focus-color "white")
(set-unfocus-color "black")
(set-border-color "black")
(set-win-bg-color "black")

;; Modeline.
(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "white")
(setf *mode-line-border-color*     "black")
(setf *mode-line-timeout*          1)
(setf *mode-line-position* :bottom)
(setf *time-modeline-string* "%a %b %e %k:%M")
(setf *window-format* "%m%n%s %c")
(setf *screen-mode-line-format* (list "[^B%n^b] %W^>%d"))
(enable-mode-line (current-screen) (current-head) t)

;; Groups.
(stumpwm:grename "1")
(stumpwm:gnewbg "2")
(stumpwm:gnewbg "3")
(stumpwm:gnewbg "4")
(stumpwm:gnewbg "5")
(stumpwm:gnewbg "6")
(stumpwm:gnewbg "7")
(stumpwm:gnewbg "8")
(stumpwm:gnewbg "9")

;; Other helpful stuff.
(defcommand firefox () ()
  "Run Firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

;; Depending on the machine, you might actually want the emacs
;; command that's built-in. This is for emacs --daemon.
(defcommand emacsclient () ()
   "Run emacs"
   (run-or-raise "emacsclient -c" '(:class "Emacs")))

(defcommand undock () ()
   "Undock"
   (run-shell-command "~/bin/undock.sh"))

(defcommand dock () ()
   "Dock"
   (run-shell-command "~/bin/dock.sh"))

(defcommand scrot () ()
   "Screenshot"
   (run-shell-command "scrot"))

(defcommand scrot-select () ()
   "Screenshot with selection"
   (run-shell-command "scrot -s"))

(defcommand stay-awake () ()
   "Doesn't let the machine lock or screen blank."
    (run-shell-command "pkill xidle")
    (run-shell-command "xset -dpms")
    (run-shell-command "xset s off"))

(defcommand allow-blank () ()
    "Opposite of stay-awake. Reverts to default state."
     (run-shell-command "exec xidle")
     (run-shell-command "xset +dpms")
     (run-shell-command "xset s 600 600"))

(defcommand lock-screen () ()
    "Activate screen lock."
    (run-shell-command "pkill -USR1 xidle"))

(defcommand start-emacs-daemon () ()
   "Start emacs --daemon"
    (run-shell-command "emacs --daemon"))

(defcommand start-swank () ()
   "Start a swank server."
   (swank:create-server :port 4004
   			:style swank:*communication-style*
                        :dont-close t))

;; NOTE: Power commands are not bound to keys right now.
(defcommand reboot () () 
   "Reboot"
   (run-shell-command "doas reboot"))

(defcommand poweroff () ()
   "Power off"
    (run-shell-command "doas shutdown -p now"))	    

(defcommand zzz () ()
   "Snooze time."
    (run-shell-command "zzz"))

;; Keys.

(set-prefix-key (kbd "C-t"))

(undefine-key *root-map* (kbd "f"))
(undefine-key *root-map* (kbd "C-f"))
(loop for i from 1 to 9
   do (define-key *top-map* (kbd (format nil "s-~A" i))
	(format nil "gselect ~A" i)))

;; General keybinds
;; Less annoying with the Kinesis keyboard.
(undefine-key *tile-group-root-map* (kbd "M-Right"))
(undefine-key *tile-group-root-map* (kbd "M-Left"))
(undefine-key *tile-group-root-map* (kbd "M-Up"))
(undefine-key *tile-group-root-map* (kbd "M-Down"))
(define-key *tile-group-root-map* (kbd "S-Right") "move-window right")
(define-key *tile-group-root-map* (kbd "S-Left") "move-window left")
(define-key *tile-group-root-map* (kbd "S-Up") "move-window up")
(define-key *tile-group-root-map* (kbd "S-Down") "move-window down")

;; Get rid of expose, and use those keys for something useful.
(undefine-key *groups-map* (kbd "RET"))
(undefine-key *groups-map* (kbd "C-RET"))
(undefine-key *group-root-map* (kbd "F11"))
(define-key *group-root-map* (kbd "C-RET") "fullscreen")
(define-key *group-root-map* (kbd "RET") "fullscreen")

;; Splitting commands.
(undefine-key *tile-group-root-map* (kbd "s"))
(undefine-key *tile-group-root-map* (kbd "S"))
(define-key *root-map* (kbd "-") "vsplit")
(define-key *root-map* (kbd "|") "hsplit")

;; Makes sense, right? Note: DEL = backspace usually.
(define-key *root-map* (kbd "C-DEL") "fclear")

;; Exec more like emacs
(undefine-key *root-map* (kbd "!"))
(define-key *root-map* (kbd "M-x") "exec")

;; Terminal
(define-key *root-map* (kbd "c") "exec xterm")
(define-key *root-map* (kbd "C-c") "exec xterm")

;; Docking/undocking xrandr automation
(define-key *root-map* (kbd "d") "dock")
(define-key *root-map* (kbd "u") "undock")

;; emacs
(undefine-key *root-map* (kbd "e"))
(define-key *root-map* (kbd "e") "emacsclient")
(define-key *root-map* (kbd "C-e") "emacsclient")

;; Firefox
(define-key *root-map* (kbd "f") "firefox")
(define-key *root-map* (kbd "C-f") "firefox")
(define-key *root-map* (kbd "C-q") "send-raw-key")

;; Screenshotting
(define-key *root-map* (kbd "s") "scrot")
(define-key *root-map* (kbd "C-s") "scrot-select")

;; My volume key stuff.
;; Bring in my sndioctl control library.
(ql:quickload :stumpwm-sndioctl)
(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "volume-down")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume-up")

;; startup stuff
(run-shell-command "xsetroot -solid black")
(run-shell-command "xrdb ~/.Xresources")
(run-shell-command "xset b off")
(run-shell-command "xset r rate 150 50")
(run-shell-command "setxkbmap -option ctrl:nocaps")
(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command "xidle &")
(run-shell-command "emacs --daemon &")
(run-shell-command "conky &")
(run-shell-command "nitrogen --restore &")
